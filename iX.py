# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'IfcXcl.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QMovie
from PyQt5.QtCore import QThread, pyqtSignal
from PyQt5.QtWidgets import QFileDialog, QVBoxLayout
from Funciones import ArchIfc
from sobreix import Ui_Dialog

from pathlib import Path
import logging


logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)

formatter = logging.Formatter('%(asctime)s:%(levelname)s:%(message)s')

file_handler = logging.FileHandler('ixapp.log')
file_handler.setFormatter(formatter)

logger.addHandler(file_handler)


ai = 'x'


class Ui_MainWin(object):

    def openWindow(self):
        self.window = QtWidgets.QDialog()
        self.ui = Ui_Dialog()
        self.ui.setupUi(self.window)
        self.window.show()

    def setupUi(self, MainWin):

        MainWin.setObjectName("MainWin")
        MainWin.setWindowModality(QtCore.Qt.WindowModal)
        MainWin.resize(800, 400)
        MainWin.setMaximumSize(800, 400)
        MainWin.setWindowIcon(QtGui.QIcon('ix_ico.png'))
        MainWin.setStyleSheet("")
        self.centralwidget = QtWidgets.QWidget(MainWin)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout = QVBoxLayout(self.centralwidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setSpacing(0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.marco = QtWidgets.QFrame(self.centralwidget)
        self.marco.setStyleSheet("color: rgb(122, 145, 191); \n"
"background-color: qlineargradient(spread:reflect, x1:0, y1:0.5, x2:1, y2:0.511364, stop:0 rgba(26, 32, 64, 255), stop:1 rgba(91, 47, 69, 255));\n"
"")
        self.marco.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.marco.setFrameShadow(QtWidgets.QFrame.Raised)
        self.marco.setObjectName("marco")
        self.tituloApp = QtWidgets.QLabel(self.marco)
        self.tituloApp.setGeometry(QtCore.QRect(0, 30, 800, 70))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(30)
        self.tituloApp.setFont(font)
        self.tituloApp.setStyleSheet("color: rgb(174, 181, 191);")
        self.tituloApp.setAlignment(QtCore.Qt.AlignCenter)
        self.tituloApp.setObjectName("tituloApp")
        self.botCargar = QtWidgets.QPushButton(self.marco)
        self.botCargar.setGeometry(QtCore.QRect(210, 240, 171, 51))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.botCargar.setFont(font)
        self.botCargar.setStyleSheet("QPushButton {\n"
                                     "    background-color: rgb(222, 159, 50);\n"
                                     "    border-radius: 10px;\n"
                                     "    color: rgb(60, 47, 69);\n"
                                     "}\n"
                                     "QPushButton:hover {\n"
                                     "    background-color: rgb(90, 47, 69);\n"
                                     "    color: rgb(222, 159, 50);\n"
                                     "}\n"
                                     "QPushButton:pressed {\n"
                                     "    background-color: rgb(255, 183, 57);\n"
                                     "    color: rgb(60, 47, 69);\n"
                                     "}")
        self.botCargar.setObjectName("botCargar")
        self.botReport = QtWidgets.QPushButton(self.marco)
        self.botReport.setGeometry(QtCore.QRect(420, 240, 171, 51))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.botReport.setFont(font)
        self.botReport.setStyleSheet("background-color: rgb(166, 166, 166);\n"
"border-radius: 10px;\n"
"color: rgb(60, 47, 69);")
        self.botReport.setCheckable(False)
        self.botReport.setChecked(False)
        self.botReport.setObjectName("botReport")
        self.botReport.setEnabled(False)
        self.estadoApp = QtWidgets.QLabel(self.marco)
        self.estadoApp.setGeometry(QtCore.QRect(0, 150, 800, 75))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(12)
        self.estadoApp.setFont(font)
        self.estadoApp.setStyleSheet("color: rgb(174, 181, 191);")
        self.estadoApp.setAlignment(QtCore.Qt.AlignCenter)
        self.estadoApp.setObjectName("estadoApp")
        self.autorApp = QtWidgets.QLabel(self.marco)
        self.autorApp.setGeometry(QtCore.QRect(0, 110, 800, 25))
        font = QtGui.QFont()
        font.setPointSize(8)
        self.autorApp.setFont(font)
        self.autorApp.setStyleSheet("color: rgb(174, 181, 191);")
        self.autorApp.setAlignment(QtCore.Qt.AlignCenter)
        self.autorApp.setObjectName("autorApp")
        self.resumenIfc = QtWidgets.QLabel(self.marco)
        self.resumenIfc.setGeometry(QtCore.QRect(0, 300, 800, 70))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(10)
        self.resumenIfc.setFont(font)
        self.resumenIfc.setAutoFillBackground(False)
        self.resumenIfc.setStyleSheet("color: rgb(174, 181, 191);")
        self.resumenIfc.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.resumenIfc.setFrameShadow(QtWidgets.QFrame.Plain)
        self.resumenIfc.setText("")
        self.resumenIfc.setAlignment(QtCore.Qt.AlignCenter|QtCore.Qt.AlignVCenter)
        self.resumenIfc.setObjectName("resumenIfc")
        self.error_dialog = QtWidgets.QMessageBox()
        self.error_dialog.setIcon(QtWidgets.QMessageBox.Critical)
        self.error_dialog.setText('Oh no!')
        self.error_dialog.setInformativeText('Algo salió mal.')
        self.error_dialog.setWindowTitle('Error')
        self.botAbout = QtWidgets.QToolButton(self.marco)
        self.botAbout.setGeometry(QtCore.QRect(740, 10, 35, 35))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.botAbout.setFont(font)
        self.botAbout.setStyleSheet("QToolButton {\n"
                                    "    background-color: rgb(27, 32, 64);\n"
                                    "    color: rgb(174, 181, 191);\n"
                                    "}\n"
                                    "QToolButton:hover {\n"
                                    "    background-color: rgb(222, 159, 50);\n"
                                    "    color: rgb(60, 47, 69);\n"
                                    "}")
        self.botAbout.setObjectName("botAbout")
        self.verticalLayout.addWidget(self.marco)
        MainWin.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWin)
        QtCore.QMetaObject.connectSlotsByName(MainWin)
        MainWin.setTabOrder(self.botCargar, self.botReport)

    def retranslateUi(self, MainWin):
        _translate = QtCore.QCoreApplication.translate
        MainWin.setWindowTitle(_translate("MainWin", "iX - Reportes de modelos BIM"))
        self.tituloApp.setText(_translate("MainWin", "<strong>iX</strong> - Reportes <strong>IFC</strong>"))
        self.botCargar.setText(_translate("MainWin", "CARGAR IFC"))
        self.botCargar.clicked.connect(self.pushButton_handler)
        self.botReport.setText(_translate("MainWin", "CREAR REPORTE"))
        self.botReport.clicked.connect(self.crearReporte)
        self.estadoApp.setText(_translate("MainWin", "Aún no cargas un archivo..."))
        self.autorApp.setText(_translate("MainWin", "@pag0dy"))
        self.resumenIfc.setText(_translate("MainWin", ""))
        self.botAbout.setToolTip(_translate("MainWin", "Sobre la app"))
        self.botAbout.setText(_translate("MainWin", "?"))
        self.botAbout.clicked.connect(self.openWindow)

    def pushButton_handler(self):
        print("Abrir archivo")
        self.resumenIfc.setText('Espera unos segundos por favor')
        self.worker = WorkerThread_2()
        self.worker.start()
        self.estadoApp.setText('Cargando...')
        self.worker.problem.connect(self.er)
        self.worker.worker_complete.connect(self.archi_carg)

    def closeEvent(self, event):
        print("Salir")
        app.quit()

    def update(self):
        self.label.adjustSize()

    def update_estado(self, msg):
        self.estadoApp.setText(msg)

    def loading(self):
        self.movie = QMovie('728.gif')
        self.movie.start()
        self.resumenIfc.setText('')
        self.resumenIfc.setMovie(self.movie)
        self.resumenIfc.show()

    def crearReporte(self):
        self.loading()
        self.update_estado('Creando reporte...')
        self.worker = WorkerThread_1()
        self.worker.start()
        self.botCargar.setEnabled(False)
        self.botReport.setEnabled(False)
        self.botReport.setStyleSheet("background-color: rgb(166, 166, 166);\n"
"border-radius: 10px;\n"
"color: rgb(60, 47, 69);")
        self.botCargar.setStyleSheet("background-color: rgb(166, 166, 166);\n"
"border-radius: 10px;\n"
"color: rgb(60, 47, 69);")
        self.worker.problem.connect(self.er)
        self.worker.completed.connect(self.reporte_cread)


    def reporte_cread(self):
        self.estadoApp.setText('Reporte creado!')
        self.resumenIfc.setText('d[ o_0 ]b')
        print('Reporte creado!')
        self.botCargar.setEnabled(True)
        self.botReport.setEnabled(True)
        self.botReport.setStyleSheet("QPushButton {\n"
                                     "    background-color: rgb(222, 159, 50);\n"
                                     "    border-radius: 10px;\n"
                                     "    color: rgb(60, 47, 69);\n"
                                     "}\n"
                                     "QPushButton:hover {\n"
                                     "    background-color: rgb(90, 47, 69);\n"
                                     "    color: rgb(222, 159, 50);\n"
                                     "}\n"
                                     "QPushButton:pressed {\n"
                                     "    background-color: rgb(255, 183, 57);\n"
                                     "    color: rgb(60, 47, 69);\n"
                                     "}")
        self.botCargar.setStyleSheet("QPushButton {\n"
                                     "    background-color: rgb(222, 159, 50);\n"
                                     "    border-radius: 10px;\n"
                                     "    color: rgb(60, 47, 69);\n"
                                     "}\n"
                                     "QPushButton:hover {\n"
                                     "    background-color: rgb(90, 47, 69);\n"
                                     "    color: rgb(222, 159, 50);\n"
                                     "}\n"
                                     "QPushButton:pressed {\n"
                                     "    background-color: rgb(255, 183, 57);\n"
                                     "    color: rgb(60, 47, 69);\n"
                                     "}")

    def archi_carg(self, dire):
        self.estadoApp.setText('Archivo cargado! Haz en click en Crear Reporte.')
        self.resumenIfc.setText(str(dire.name))
        print(ai.infomod(ai.Ifc))
        self.botReport.setEnabled(True)
        self.botReport.setStyleSheet("QPushButton {\n"
                                     "    background-color: rgb(222, 159, 50);\n"
                                     "    border-radius: 10px;\n"
                                     "    color: rgb(60, 47, 69);\n"
                                     "}\n"
                                     "QPushButton:hover {\n"
                                     "    background-color: rgb(90, 47, 69);\n"
                                     "    color: rgb(222, 159, 50);\n"
                                     "}\n"
                                     "QPushButton:pressed {\n"
                                     "    background-color: rgb(255, 183, 57);\n"
                                     "    color: rgb(60, 47, 69);\n"
                                     "}")
        return ai

    def er(self, str):
        self.estadoApp.setText(str)
        self.resumenIfc.setText('(✖╭╮✖)')
        print('Error!')
        error_dialog = QtWidgets.QMessageBox()
        error_dialog.setIcon(QtWidgets.QMessageBox.Critical)
        error_dialog.setText('Oh no!')
        error_dialog.setWindowTitle('Error')
        error_dialog.setInformativeText(str)
        error_dialog.exec_()
        logger.exception(str)
        self.botCargar.setEnabled(True)
        self.botReport.setEnabled(False)
        self.botCargar.setStyleSheet("QPushButton {\n"
                                     "    background-color: rgb(222, 159, 50);\n"
                                     "    border-radius: 10px;\n"
                                     "    color: rgb(60, 47, 69);\n"
                                     "}\n"
                                     "QPushButton:hover {\n"
                                     "    background-color: rgb(90, 47, 69);\n"
                                     "    color: rgb(222, 159, 50);\n"
                                     "}\n"
                                     "QPushButton:pressed {\n"
                                     "    background-color: rgb(255, 183, 57);\n"
                                     "    color: rgb(60, 47, 69);\n"
                                     "}")


class WorkerThread_1(QThread):
    problem = pyqtSignal(str)
    completed = pyqtSignal(str)

    def run(self):
        global ai
        print('Creando Reporte...')
        try:
            ai.crear_repo(ai.Ifc)

        except Exception:
            self.problem.emit('Error al crear el reporte.')
            logger.exception('Error al crear el reporte.')
        else:
            self.completed.emit('Reporte creado con éxito!')


class WorkerThread_2(QThread):
    problem = pyqtSignal(str)
    worker_complete = pyqtSignal(Path)

    def run(self):
        filename = QFileDialog.getOpenFileName(parent=None, caption='Abrir archivo...', filter= 'Ifc *.ifc')
        path = filename[0]
        global ai
        ai = ArchIfc(path)
        if filename != ('', ''):
            try:
                archi = ai.Ifc
            except Exception:
                self.problem.emit('Error al cargar el archivo.')
                logger.exception('Error al cargar el archivo.!')
            else:
                dire = Path(path)
                self.worker_complete.emit(dire)



if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWin = QtWidgets.QMainWindow()
    ui = Ui_MainWin()
    ui.setupUi(MainWin)
    MainWin.show()
    sys.exit(app.exec_())
